// Code generated for package ofcourse by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/Dockerfile
// templates/Makefile
// templates/README.md
// templates/cmd/check/main.go
// templates/cmd/in/main.go
// templates/cmd/out/main.go
// templates/go.mod
// templates/pipeline.yml
// templates/resource/resource.go
// templates/resource/resource_test.go
package ofcourse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xbd\x4a\xc6\x30\x14\xc6\xf1\xfd\x5c\xc5\x33\x75\x10\x92\x43\x5d\x04\xc1\x41\x14\x3f\x10\x4d\x09\x8a\x08\x2e\xfd\x88\x21\x98\xe6\x94\x24\xf5\xfa\x1d\xda\x77\x28\xef\x78\xf8\x73\x1e\x7e\x0f\xd6\xbc\xc2\x4b\xec\x93\xbf\x6e\x75\x7b\xa9\xaf\xd0\x17\x0c\x6b\x88\x93\xcb\x44\x77\xa6\xfb\x82\x06\x8f\x32\x39\xa2\x4f\x63\x5f\xee\x9f\xed\xe9\xb4\x1f\x6f\x58\x53\x71\x15\x8f\xa6\xbb\x7d\x7f\x42\xd3\xe0\x9b\x00\xc0\x0b\xaa\x2b\x15\xea\x0f\x9a\xb5\xd6\x87\x12\x52\xa9\x7d\x8c\x5b\x21\x3a\x17\x6c\xcb\xf3\xef\x14\x32\xd4\x02\x96\xa5\x72\x76\x45\xd6\x3c\xba\x9d\xa4\xd4\x4f\x96\xf9\x66\x77\x82\xb3\x48\x65\x2f\x3c\x84\xc4\x17\xc7\x0f\xa6\xff\x00\x00\x00\xff\xff\xcb\xef\x5d\x77\xe4\x00\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 228, mode: os.FileMode(420), modTime: time.Unix(1562868147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x5d\x6b\xc2\x30\x18\x85\xaf\xfb\xfe\x8a\x83\x14\xd4\x41\xb2\xfb\x88\x17\x82\xee\x03\xc4\x0e\xf7\x01\x83\x81\xe8\xf2\xa6\x0d\x6b\x1b\x69\xd2\xc9\x70\xfe\xf7\xd1\x0f\x77\x31\x76\xe1\xdd\xc9\x93\x3c\xe1\x1c\x6b\x34\x1b\xbc\x2c\xd6\x8f\xf7\xc9\x8a\xb4\x7b\xff\xe0\x6a\x53\x71\x6a\x7d\xa8\xbe\x30\xc5\xf1\x08\x39\x6f\xe9\xfa\x0c\x4f\x27\x15\x8f\x7a\x63\x4c\x9c\x7b\xbe\xd4\x23\x2e\xb5\x35\xd4\x3f\x57\x14\x75\x01\xbb\xda\xe6\x1a\x22\x20\x1e\xfd\xf9\x69\x0c\x49\xb4\xaf\x77\xb9\xf5\x99\x42\x77\xf9\xab\xed\x6b\x9f\xfd\xa3\x10\x05\xf6\x41\x51\x94\x3a\x34\x09\xe2\x13\xf2\x5a\x4a\x49\x64\x8a\x86\x1b\x5b\x6a\x48\x88\x72\x5b\x30\x86\x57\x32\x75\x43\x7c\xe3\x90\xd9\x9c\x51\xf1\x56\x43\x54\x30\x13\x68\x87\x37\x8a\xa2\xd4\x99\x22\x40\x1c\x20\x3c\x06\x71\x6c\x06\x93\x06\x6b\x57\x32\x91\x9c\x2f\x6e\x66\xcf\xcb\xa7\xcd\x6d\x32\x5b\x42\x4d\xcf\x0d\x49\x3e\xdc\x25\xab\x57\x85\xd4\x89\xc2\xe9\x1e\x8b\x6e\x67\x7f\x68\xdb\xf7\x4b\xda\x9a\xa6\x08\xf4\x13\x00\x00\xff\xff\x58\xb1\xa5\x6f\x8f\x01\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 399, mode: os.FileMode(420), modTime: time.Unix(1562744699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\x1b\x37\x14\xbc\xf3\x57\x0c\xa0\x9b\x10\x6d\xaa\xb6\x41\x81\x05\x7a\x49\xec\x16\x3d\x34\x31\x94\xb4\x3d\x9a\xd4\xee\x13\xc9\x8a\x4b\x6e\xf9\x21\xc5\x08\xf2\xdf\x8b\xc7\xd5\xc6\x56\x5c\xb9\xee\xa1\x27\x49\xe4\xcc\x9b\x79\xc3\x47\x6a\x81\x4f\x9f\xd0\x6c\x28\x85\x12\x3b\xc2\xe7\xcf\x42\xfc\x11\x6d\x26\x28\xf4\x94\xba\x68\xc7\x6c\x83\x47\xd8\x21\x1b\x42\x9c\x71\x86\x22\x35\x42\x2c\x16\x78\x3f\x2d\xbc\x09\x7e\x67\x75\x89\x8a\xe1\x42\x2c\x21\x95\x6c\xb1\xdc\xd0\x5f\xc5\x46\xea\x9b\x25\x3e\x18\x9b\x60\x13\x14\xe2\x69\x11\x89\x72\xb6\x5e\x37\x15\xbf\x65\xfc\xbb\x2a\xa7\xdc\x43\xbc\x47\x38\xad\x9e\x13\xba\x33\x02\xae\x68\xa7\x8a\xcb\x90\x39\x16\x92\x4f\xf2\x71\xb4\xd9\xd4\x0e\x27\xca\x41\xb9\x32\xb5\xb3\xc0\xf5\x47\x35\x8c\x8e\x84\x90\x52\xde\xa9\xc1\x89\xb9\xe7\xdb\x7c\x37\x52\x6a\xc5\x0a\x5e\x0d\xd4\x3e\xca\x0d\x60\x40\x8b\x3e\x74\x7b\x8a\x2b\x3b\x28\x4d\x02\x98\x00\xad\x00\x80\x48\x63\x48\x36\x87\x78\x37\xd1\xaf\x2a\x74\x43\xda\xa6\x1c\xef\x6a\xf8\xb3\xda\x33\x84\x1e\xaf\x77\x86\xba\xfd\x2d\x1d\x88\x05\x5e\x0d\x5f\xa9\xbb\xa0\x6f\x1d\x1d\xc8\xb5\xe8\x69\x5b\xb4\x10\x7f\x86\xed\x03\x9d\x3e\xac\x6c\x16\xc0\xe8\x94\x67\xc6\x0a\x9a\xf2\x3f\xc9\x00\x39\x5a\xad\x29\xb6\xe0\xac\x2b\x74\x2c\x17\xa0\xa3\x8a\x6a\x48\x93\x03\xe0\x40\x31\xd9\xe0\x6f\x47\x95\xcd\x23\xfc\xcb\xd3\x2e\x47\x5f\x67\xeb\x35\x19\x75\xb0\x21\x4e\x27\x23\x6b\x7b\xb2\xc5\x1b\xfe\xc4\x2e\x44\xa4\x30\x50\x36\xd6\xeb\x8b\x53\x7b\x34\x2a\xf3\x14\x54\x2e\xf5\xf7\x83\xbb\x80\xb4\x5e\xb6\xf8\x89\x72\x67\xfe\x43\xa1\x1d\xe3\xcf\x0a\x2d\x70\xc3\x3d\x52\xa6\x98\x9e\x3b\xf9\xe3\xcc\x78\xfe\xec\x3f\xa4\x54\xfb\xa1\x64\xd9\xe2\xa6\xe4\x7b\xf7\xf5\xdb\x91\xad\xfd\x6b\x1f\x5b\x62\xfc\x78\x62\x1f\xff\xc7\x76\x9e\x75\x33\xbf\x54\xb8\x7c\x37\x71\xc5\xc3\x1b\xc6\x81\x7c\x9e\x22\xb8\x89\x54\x2d\x24\x9b\xa9\x7a\xd5\xc1\x29\xaf\xb9\xf6\x72\xf6\xb6\xc4\x6a\x9e\x3a\xac\x9b\xf5\xba\xf9\x88\x10\x61\xac\x36\x14\x19\x38\xe3\x1a\xb1\x3c\x5d\xdd\xcb\xf4\x1f\x9a\x6f\x5e\x3d\xc5\x1f\xd4\x9e\x2e\xb2\xbf\x6f\xd6\x9c\xff\xcf\x6f\x7f\xfb\x82\xcb\x94\x32\x33\x6b\x33\x9b\xe2\x3d\x1f\x09\xbf\xb3\xbc\x91\x84\xf8\x60\x08\xbf\xaa\x3d\xed\xac\x23\x58\xdf\xb9\xd2\x13\xe7\x2e\x79\x5f\x22\xab\xa8\x29\xbf\x80\xf2\xfd\xc4\x80\x8a\x04\xe5\x52\x40\x2c\x1e\xd6\x27\xdb\x53\xad\x37\x3d\x34\xd8\x16\xeb\x58\x6e\x53\xfc\xbd\xcc\x14\x38\xff\xdc\x05\xe7\xc2\x91\x3d\x74\x61\x18\x94\xef\xdb\xfa\x0a\x26\x23\xaa\x61\x46\xcf\x57\x73\x81\xd7\x5c\x8b\xb1\xac\x3e\x96\xad\xb3\xc9\xcc\xf6\xa7\xb7\xef\x82\xfd\xc9\x75\xaa\xf7\x77\xfb\x44\x91\xf9\x30\xb8\x56\x83\x6b\xd5\x99\xd3\xbf\x50\x22\x91\xd5\x9e\xce\xe7\x47\xfe\x7e\xbd\x79\xff\xcb\xbb\xb7\x12\x2a\xea\xc2\x23\xf2\x02\x47\x63\x3b\x83\xa3\x75\x0e\x59\x55\x8d\x97\x21\x62\x2c\xc9\x3c\x12\xa8\x21\x08\x5e\xd5\xf6\x40\x7e\x3e\xb4\xe6\x2c\x80\x93\xc4\x8f\xeb\xe6\xdb\xe6\xbb\x69\xe9\xe4\xf9\xab\x2d\x0e\xe9\xef\x00\x00\x00\xff\xff\x1b\x38\x83\x44\x59\x07\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 1881, mode: os.FileMode(420), modTime: time.Unix(1562867771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdCheckMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xbd\x0a\xc3\x20\x14\xc5\xf1\x39\xe7\x29\xc4\xa1\xe8\xa2\x0f\xd1\xa9\x5b\xe9\x1b\x98\x5b\x13\x25\x35\x37\xf8\x31\x89\xef\x5e\x08\x4d\xb7\xff\xe1\xc0\xef\x70\xb4\xb9\xd5\x8b\xe4\xe2\x0e\xc4\x74\x70\xae\x42\x61\x92\xbd\x0b\xf3\x38\xe7\xd3\xd5\x20\xc6\xb0\xd9\x17\x6e\x99\xbc\xc4\x24\xd7\x58\x43\x9b\x0d\x71\xb2\xf4\xe1\xf6\x9e\xb9\x14\xcb\x0b\x71\xcb\xc5\xff\x43\x42\x03\x4b\xdb\xe9\xe4\x95\x16\x1d\xd3\xf5\x99\x7b\xf0\xb4\xa9\xdb\xa5\x9a\xd7\x2f\xfa\xd0\x18\xf8\x06\x00\x00\xff\xff\x7d\x4e\xa3\xf9\x98\x00\x00\x00")

func cmdCheckMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdCheckMainGo,
		"cmd/check/main.go",
	)
}

func cmdCheckMainGo() (*asset, error) {
	bytes, err := cmdCheckMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/check/main.go", size: 152, mode: os.FileMode(420), modTime: time.Unix(1562744699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdInMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x9f\xc2\x62\xa8\x60\x81\x73\x64\xab\x7a\x03\xe2\x92\x04\xb5\xe0\x08\xf0\x84\xb8\x7b\xa5\x28\x49\x3d\x3d\x59\x4f\xff\xed\x9e\x3e\x7e\x0d\x98\x7c\xcc\x00\x31\xed\x5c\x1a\x6a\xc0\xf3\x54\xef\x68\xa7\xe3\xfb\xf4\x6d\xc3\x31\x5c\x09\x95\xa5\x50\x50\x7f\x69\x8d\x6d\x93\xd9\x12\x27\x47\x5f\x96\xf7\xcc\xb5\x3a\x5e\x88\xa5\xd4\x70\x83\x02\x03\xb0\x48\xa6\x23\xa6\x0d\xf6\x7b\xe1\x52\xec\x94\xf5\xe3\x0a\xd8\xd7\x09\x7d\x18\x18\xf0\x0b\x00\x00\xff\xff\x29\x86\x1f\xc2\xaa\x00\x00\x00")

func cmdInMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdInMainGo,
		"cmd/in/main.go",
	)
}

func cmdInMainGo() (*asset, error) {
	bytes, err := cmdInMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/in/main.go", size: 170, mode: os.FileMode(420), modTime: time.Unix(1562867771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdOutMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x9f\xc2\x62\xa8\x60\x81\x73\x74\x6a\xd5\x1b\x10\x97\x24\xa8\x25\x8e\x00\x4f\x88\xbb\x57\x8a\x12\xea\xe9\xc9\x7a\xfa\x6f\xf7\xf4\xf1\x4b\xc0\xe4\xe3\x06\x10\xd3\xce\xb9\xa2\x06\x3c\x4f\xb5\x86\xf6\x7e\x7c\x9f\xbe\xae\xd8\xbb\xcb\xa1\xb0\x64\x0a\xea\x2f\x2d\xb1\xae\x32\x59\xe2\xe4\xe8\xcb\xf2\x9e\xb8\x14\xc7\x33\xb1\xe4\x12\x06\x28\x30\x00\xb3\x6c\x74\xc4\xb4\xc1\x36\x16\x2e\xc5\x3e\xa4\xea\xdb\x55\xb0\xaf\x13\x5a\x37\xd0\xe1\x17\x00\x00\xff\xff\x44\xcd\xfd\xef\xab\x00\x00\x00")

func cmdOutMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdOutMainGo,
		"cmd/out/main.go",
	)
}

func cmdOutMainGo() (*asset, error) {
	bytes, err := cmdOutMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/out/main.go", size: 171, mode: os.FileMode(420), modTime: time.Unix(1562867771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\x56\xd0\xf3\xcc\x2d\xc8\x2f\x2a\x09\x48\x2c\xc9\x50\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xc8\x9d\xfe\x34\x19\x00\x00\x00")

func goModBytes() ([]byte, error) {
	return bindataRead(
		_goMod,
		"go.mod",
	)
}

func goMod() (*asset, error) {
	bytes, err := goModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.mod", size: 25, mode: os.FileMode(420), modTime: time.Unix(1562744699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x6e\xe3\x30\x10\x44\x7b\x7e\xc5\x00\xd7\x9e\x7c\xd5\x35\xaa\x93\x22\xad\x7f\x40\x5a\x4b\x2b\x6a\x63\x8a\x2b\x90\x4b\x05\x86\xe1\x7f\x0f\x64\xcb\x41\x10\x27\x40\x5a\xce\xe3\x3c\xec\x24\xce\x5a\x52\xc7\x8d\x9d\x66\xce\xb5\xab\x10\x69\xe2\x1a\xe7\x33\x76\xfb\x2d\xc3\xe5\xe2\x80\x15\xa8\xd1\x6b\x77\xe4\x54\xc9\x44\x9e\x1d\x70\x03\x6a\x07\x00\x89\x67\xcd\x62\x9a\x4e\xb7\xef\x4f\x57\x74\xcf\x5e\xb2\xa5\xd3\x5a\xe2\xee\xb6\x5f\x88\x1e\xdf\xbb\x91\xbb\x63\xc3\x0b\xaf\x82\xff\xd3\x17\xfb\x1f\x3c\xaf\x09\xee\x0a\x74\x89\xc9\xb8\x47\xc9\x12\x3d\x74\xe8\xb4\xa4\xcc\x78\x93\x10\x30\xd2\xc2\x68\x83\xfa\x26\xf0\xc2\xa1\xdd\x1a\x28\x83\x22\x68\x21\x09\x74\x08\x0c\x9d\x4d\x34\x42\x22\x6c\x64\xdc\x7b\x35\x0e\xe2\x4b\xa2\x35\xdb\xe1\x65\x40\x54\xdb\x0a\xbc\x2c\x1c\xff\x42\x0c\x3d\x0f\x54\x82\x65\x98\xa2\x95\x38\x68\xbb\xbb\x32\x1f\xce\x1a\x3d\x1f\x8a\x77\xee\x55\x0f\x9f\xe6\xe8\xb5\x92\xb5\x6d\x0e\x14\xd7\xc3\x2a\x78\xb6\xef\xd6\x00\x2c\x89\xf7\x9c\x6a\x58\x2a\x7c\x45\xe7\xf2\x03\x3a\x53\xa2\x29\xdf\x86\x02\x16\x4e\x59\x34\x36\x33\xd9\xf8\xc0\xff\xdb\x52\xf7\x1e\x00\x00\xff\xff\x80\x32\xbf\x14\x1a\x02\x00\x00")

func pipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_pipelineYml,
		"pipeline.yml",
	)
}

func pipelineYml() (*asset, error) {
	bytes, err := pipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline.yml", size: 538, mode: os.FileMode(420), modTime: time.Unix(1562867771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceResourceGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x8f\xdb\xc6\x11\x7f\x16\x3f\xc5\x58\x40\x1a\x29\x65\xa9\xa6\x08\xfa\x70\xc5\x3d\x34\xb6\x83\x5c\xdb\xd8\x86\xff\xc4\x0f\x86\x51\x8d\xc8\xa1\xb8\x16\xb9\xcb\xec\x2e\x25\x0b\xc6\x7d\xf7\x62\x66\x77\x49\xea\xce\xae\x63\x23\x4f\x27\xe9\x66\x67\x66\xe7\xcf\xef\x37\xb3\x9b\x0d\x3c\xc3\xf2\x80\x7b\x02\x4b\xce\x0c\xb6\x24\x50\x0e\x50\x83\xea\xfa\x96\x3a\xd2\x1e\xbd\x32\x1a\x4c\x0d\x08\x0f\x8d\x2e\xcd\x60\xdd\x24\x5c\x64\xfd\x9d\xe3\x59\xa6\xba\xde\x58\x0f\xab\x6c\xb1\x24\x5d\x9a\x4a\xe9\xfd\xe6\x9d\x33\x7a\xc9\x3f\x58\x6b\xac\xe3\x4f\x75\xe7\x97\xd9\xc2\x94\xb0\xdc\x2b\xdf\x0c\xbb\xa2\x34\xdd\xa6\x6c\xcd\x50\xed\x8c\x73\x1b\x53\x07\x4b\xe3\x07\x3e\xa3\xcc\x46\x99\xc1\xab\x96\xbf\x38\x6f\x4b\xa3\x8f\xcb\x6c\x9d\x65\x9b\x0d\xbc\x6c\x94\xbb\xb8\x83\xd1\xed\x19\x10\xdc\x81\x5a\xf2\x46\x43\x6d\x2c\xec\xc9\x7b\xa5\xf7\xe0\x3c\x5a\x4f\x55\x01\xaf\x1b\xf4\xa0\x3c\x54\x86\xdc\x55\xb6\xd9\xb0\xa6\x9f\x8c\x85\xed\xc3\x86\xca\xc3\x36\xe7\xff\x29\x5d\x5a\x89\x84\x03\xe5\x1d\x1c\xc9\x3a\x8e\x08\x61\xd9\x80\x57\x1d\x89\x8c\x83\x12\xdb\x96\xaa\x3c\xe8\x66\x23\x27\xe5\x1b\xd8\x7e\x58\x96\x66\xd0\x7e\x79\x05\xcb\xef\x97\xb7\xdb\x02\x5e\x36\xc4\x56\x34\xbd\xf7\xa3\xae\x93\x19\xda\x0a\x76\x74\x21\xfe\xb7\xe5\xed\x36\x07\xd4\x15\x38\x03\x46\x17\x73\xf7\x6e\x74\xf0\xed\x64\x95\x27\x07\x08\xb5\x6a\x09\x4a\xa3\x3d\x2a\xcd\xc6\x7d\x43\xd0\xa2\x27\x37\x19\xf1\x46\xfc\x37\x83\xef\x07\x0f\x95\xb2\x54\x7a\x63\xcf\x17\x7a\x9f\x0e\x3e\x28\x6e\x8d\x39\x38\x50\x5a\x14\x8d\xb2\x50\x5a\x42\x4f\x15\xec\xce\xe2\x83\x04\x95\x25\x92\x0d\x71\x83\x5d\xb6\x84\x95\x0b\xd1\xf3\x06\x10\x3a\xec\x73\xb6\x62\xc9\x0f\x56\x3c\x54\x1e\x76\x58\x1e\xd8\xad\xb1\xae\x92\x2f\x37\x1a\x4a\x74\xc4\xaa\x6d\x2c\xc8\x33\xdf\xae\x1e\xc4\x0a\xee\xcc\xe0\xe1\xd4\xa8\xb2\x89\xbe\x29\xa3\x5d\xf0\x88\x8d\xcb\x35\xc0\x52\x4d\x16\xbc\xc9\xe1\x6c\x06\x70\x8d\xc4\x78\x2c\x6b\x36\x23\x07\xbc\x11\x67\xc1\x52\x67\x3c\x71\xcd\xe8\x2a\xc4\x15\x5a\xc3\x49\x3d\xe7\x6c\xaa\xa5\xa8\x36\x2a\x92\x33\x51\x60\x76\x24\x69\x29\x44\x79\xb8\x71\x49\xea\x48\xd2\x54\x77\x63\x1f\xb2\x1b\x14\xf6\x2d\x72\xe1\x7a\xa9\xe2\xa1\xf5\xf1\xf2\x58\x7b\xb2\x1c\x36\xab\xe8\x18\xe3\x56\x5b\xd3\x81\x33\x1d\xc1\x6a\x70\x03\x7b\xb0\x0e\x96\xd8\x36\x84\x16\xc8\x25\x5e\x6a\x3f\x58\xaa\xc0\x37\xd6\x0c\xfb\x06\xb6\xe1\x7f\xdb\x94\xd8\x5e\xf5\xd4\x2a\x4d\xdf\xce\x5a\xa7\xa2\x5a\x69\xc5\x11\x2d\xc6\x40\x8e\x37\x60\x33\x4a\x5f\xde\x21\x05\x90\xbd\xca\xff\xef\x8d\x52\xbe\xd9\xf4\x85\xb3\x29\xef\xd2\xc4\x63\xc7\x4e\x2e\x19\x72\xa0\x8d\x87\x8a\xb0\x0d\x7d\x85\x97\x0a\xfe\xc1\x61\x71\x9c\xdc\x73\x2c\xbd\x31\x25\x2e\x64\x49\x4a\xd3\x25\x43\xff\x26\xea\x39\x08\x9d\xd2\x55\x0e\x9e\xcd\x8e\x90\xa1\x81\xde\x23\x97\xc9\x03\xf8\x91\x4e\x68\x49\xc0\xaf\x3d\xe1\xd9\xcd\xca\x17\x61\xd0\xea\xb7\x61\x2a\x7d\x86\x84\x23\x71\x8f\x30\x74\xb0\x11\xbe\xe6\x09\xcf\x41\x7d\xd4\x29\x77\x29\xe0\xa6\x96\xa2\x6c\xf0\x48\xd0\x71\x71\xbb\xa1\x6c\xc6\x0b\x3b\xf0\x8c\x4b\x6c\x5a\x94\x11\x07\x97\x7e\x1b\x48\x7b\x76\xb0\xb4\xc6\x39\x39\xc6\x56\x52\x0e\x5d\x00\x04\xd5\xb6\xc0\xf9\x41\x68\x8d\x67\xcf\x5b\x83\x15\x3b\x27\x8d\x8c\x1e\x77\xe8\x38\xdf\x0f\x9f\xbd\x2a\xb2\xec\x88\x96\x81\x7a\xb3\x81\xc7\xd6\xfe\x1a\x6f\xd2\x11\xea\x09\xe7\x3a\xec\x39\x36\x1d\xb6\xb5\xb1\x1d\x55\xd9\x62\x26\x7a\x0d\x01\xd1\x8b\x27\x74\x5a\x6d\x0f\x74\x86\x88\x5f\x92\xae\xda\x0c\xba\xe2\x30\xcf\x74\x6d\xd7\xc9\xdc\x33\xb4\xd8\x45\x63\x3d\x7f\x26\x4f\xd6\xc9\xad\x2f\x8d\x05\xc1\x4b\x53\x9d\x72\x8e\xd3\xb0\x8c\xaa\xff\xdb\xa3\x6f\x96\x93\x9e\xed\x3a\xf2\xc2\xf3\x91\x12\x52\xe7\x3b\x09\x45\xe2\x95\x62\x12\xd0\x9e\x6c\x8d\x5c\x8d\xfe\xdc\xd3\x74\xd2\x79\x3b\x94\xfe\xc3\xad\xe8\x13\x62\xf8\xbc\xb2\x20\xd6\x91\x6f\x4c\xc5\xad\x68\x2d\xb9\xde\xe8\x4a\xb0\x39\x74\xc0\xc6\xf4\x7e\x93\x52\xbe\x91\x44\x43\x69\xba\x0e\x75\x55\x8c\xcd\x30\x12\x0b\x9c\x1a\xd2\x33\x06\x96\x9e\x88\xbd\x15\x4c\x8a\x06\x97\x83\xb1\x41\x96\x6d\x6c\xeb\x36\x16\xe4\x5f\x92\xdc\x36\x19\x61\xdd\x76\xd0\x45\x56\x0f\xba\x84\x95\x85\xef\x92\xf7\xeb\xe0\xfe\x2a\x2a\x36\x65\xf1\x22\x62\xca\x58\xec\x65\x11\x4b\x20\x07\xd2\x47\xfe\xfe\x58\x1f\x95\x35\x9a\x83\x92\x67\x8b\xd6\xec\xf7\x64\xe1\x3b\x53\x16\xff\x91\x8f\x6b\x58\xbd\x79\x7b\x71\x8c\xb3\xb9\x86\x0f\x52\x0e\xcf\xa5\xaf\xa8\x82\x6d\xb4\xe0\x46\xa0\xdd\x11\x60\xdb\x72\x25\xcf\x88\xc6\x81\x53\xba\xa4\x10\x7c\x4d\xb0\x57\x47\xd2\x09\xd5\x92\x8e\xad\xa8\x46\xbb\x1f\xd8\x29\x69\xba\xf1\x5f\x7c\x79\xad\x5a\xee\x7d\xd2\xb1\xad\xe5\x70\xad\xac\xf3\x80\x47\x54\x2d\xee\xda\xd1\x60\xc1\x9c\x24\x9d\xca\xc4\xe4\x02\x38\x8b\x7e\xe9\xb8\x1d\x05\xf0\x60\x5f\x66\x7c\x1b\xf4\xe6\x50\x51\x4f\x21\xf7\xb1\x11\xa5\xc0\x4c\x3d\x25\x6f\x47\x82\xed\xa9\xac\xa8\x2a\x44\x39\x93\x72\x44\x8e\x1c\x10\xf6\xca\x4f\x47\x4e\x91\x87\xc4\x75\x84\x56\x39\xe9\x77\xce\x2e\xd7\xc5\xa7\x03\x24\x9a\xa7\x48\xa4\x00\x31\xcd\x91\x25\x8c\xe8\x13\xd4\x73\x1b\x77\x78\x20\x70\xa4\x1d\x09\xdf\x4f\x28\x15\x19\xd8\x88\x94\x60\x19\x63\x12\x6b\x3f\x28\x5d\x09\xf8\x28\x4d\x68\x53\x48\x94\xde\x17\x59\xb6\x10\x84\x80\xab\x6b\x9e\x88\xb2\x85\xaa\xc7\x88\x3d\xb8\xe6\x9c\x70\x49\x2c\x4c\x5b\x3d\x64\xb1\x1c\xcc\x81\x45\xa3\xc8\x9b\x08\x2f\x6f\xb3\x05\x1f\x7c\x60\x0e\x22\xbd\x88\x51\x90\x8c\x4e\xf0\x94\x2d\x16\xb7\x2c\x28\xc5\xc6\x5a\xe2\xcc\x58\xfc\xd3\x1b\xb5\x4a\x26\xd6\x41\x17\x8b\xcc\x1c\xb8\x50\x49\xd6\x46\x5d\xc1\xf7\x49\xd3\x8d\x37\xb8\x52\xf0\x67\xf8\x7e\x9d\x2d\x6e\x33\xb9\xfc\xcd\xac\x4f\x39\x6b\xe9\x7a\x61\xb0\x46\xbb\x53\xde\xa2\x3d\x83\x23\x49\x98\xf3\x96\x73\x7f\xa0\x73\x60\xad\xf8\xfd\x88\xed\xc0\x84\xb5\x48\x50\xd0\xf3\x5c\x59\x0e\xed\x14\x4f\xa6\x78\xa7\x1c\x0f\x75\x35\xbc\x1b\x38\xff\x9a\x58\x91\xe8\x11\x05\x45\xb6\xd0\x74\x4a\x70\x7d\x75\x3d\xeb\xdc\x69\xd4\x94\xbf\xec\xfc\xd8\x5d\x57\xd7\x30\xef\xd6\x0f\x93\x0e\x16\x8b\xa1\x49\xd2\x39\x07\x29\x0b\xf0\x78\xa3\x3f\x8f\x8d\xdc\x49\xbf\x1f\x18\x95\xfe\x2c\x2a\xce\x37\x93\x77\x66\x17\xb0\x71\xbb\x27\xbf\x4d\xfd\x36\xed\x2b\x1f\x01\xbb\x1b\xbd\x0a\x83\xd9\xa3\x71\xa6\x09\x39\xc8\xe1\x3e\x02\x0a\xc3\x38\xfe\x45\x68\xc9\x7d\x14\x13\xb3\xc5\x47\x40\x11\x3e\x86\x89\x73\x44\x34\x65\xf1\x0b\x79\x64\x92\xbe\x03\x8f\x8f\xa8\x33\x81\xcb\xf7\x7b\x6e\xa2\x91\x9b\x5c\x42\x49\xcd\xb3\x07\x0c\xdc\xa2\x9d\x2f\x9e\x59\xa5\x7d\xcd\x4c\x80\xfa\xec\x9b\xb0\x10\x60\x5a\x17\x44\xa5\x37\xbc\xa9\xe8\x0a\x6d\x15\xc7\xd2\x1c\xd0\x8d\x23\x04\x27\x66\xe8\x65\x08\x85\x7f\xbd\x78\xfa\x24\x8d\xae\xf4\xbe\xa7\x32\x6e\x00\xb3\xb1\x3d\xe2\x7d\xf1\x98\xbd\xae\x57\xcb\x94\x25\x1e\xa6\xf8\xa7\xe5\x7a\x14\x79\x8d\x56\xcf\x25\xe0\x84\x32\x51\xcd\x44\x6e\x74\x6d\x2e\x95\x28\xcd\xf3\x80\xac\xa2\xd8\x42\x47\xce\xe1\x9e\x66\x27\x1e\xd1\x6e\xd8\x5f\x68\xad\xf8\x97\x99\xa4\x5c\xfa\xb5\xcc\xe8\x17\x1c\x31\xc2\x1f\xc8\x9e\x22\x0b\x4c\xe4\x91\xbb\xd3\x7a\x2e\x3a\x5c\x28\xd2\x30\x1a\x73\x35\xc9\x7e\x5c\xa2\x0e\x53\xb0\xf2\x45\xb6\x08\x27\x9f\xa1\x6f\xb8\x93\x38\x23\x2f\x7a\x49\xc9\x6a\xf9\x8d\xdb\x44\xd3\xcb\x1c\xee\x94\xdd\x3a\x5b\xec\xce\x9e\x27\xb9\x88\x57\xbc\x36\x17\xbf\xa0\x75\x0d\xb6\xab\x78\x6c\x9d\x7d\x04\xad\xe6\x60\x35\x21\xd6\xed\xbd\xf8\xc4\x5a\xbb\x82\x6f\xdc\x32\x8f\x55\xbe\x12\x9b\x6b\x0e\x11\x6b\xbd\x86\xb0\x63\x17\x12\xac\x9f\x54\x4b\xab\xe9\x3a\x39\x44\x07\xff\xfa\xf7\x1f\x7e\xf8\x22\x4f\x24\x76\xa9\xbc\x2f\x80\x6b\x02\x44\x8d\x1d\x6d\x04\xb6\xa0\x47\x65\x9d\xd0\x4d\xa5\x5c\xdf\xe2\x39\x25\x65\xea\xf4\x57\x37\x21\x21\x8c\x75\x1d\x9e\x99\x83\x6d\x1a\x23\xa8\xeb\xfd\x19\x54\x2d\xcc\xa4\x89\x2a\x21\xd4\x2e\x99\x0f\x38\x98\xbc\x61\xb7\x05\xf2\x9f\x60\x47\x57\x00\x4b\x5c\xe6\xfc\xf5\x57\xf6\xe4\x0a\x96\x3b\xf9\x7a\x9b\xdf\x15\x2b\x2f\xc5\xaa\x51\x2c\xde\xf6\x67\xb2\x94\x5f\x8e\x1c\x3d\x3a\x37\xdb\xc7\x64\x91\xe3\x5b\xcd\x86\x14\x0d\x9d\x71\x3e\x8c\x19\x32\xd2\x33\xfd\xba\xc0\xbf\xa9\x73\xe3\x3a\x18\x4a\x59\xc4\x79\x47\xd3\xe3\xae\x9f\x83\x2a\xa8\x18\xc9\xff\xee\x5c\x34\xa3\x7c\xd4\x55\x50\x3a\x1b\x83\xd2\x66\x3e\xe8\xb2\x41\xbd\xa7\xaa\x80\x9f\xcd\x89\x01\x26\x8f\x6f\x1d\xd8\xb6\xe6\xc4\xf7\x48\x23\x4e\xd8\x46\x0d\x4f\x45\xc9\x07\x51\xcb\xe3\x0b\x0f\x1e\x8c\x03\x92\x92\xd1\xc1\x7b\x23\xd1\xe5\x83\x53\x71\x97\x65\x72\xe8\x46\x6c\x9c\xe8\xe6\xe9\xe0\x3f\xcf\x37\x2c\xf4\x05\x84\x63\x06\xff\x75\x8c\x83\xb0\xed\x87\xdf\xc9\x39\x4f\x07\xbf\x92\x45\xfa\xab\x38\xe7\x8f\xe6\x97\x97\xf7\x01\x6d\xdc\xb9\xe3\xf6\xcf\xb7\xbb\x57\x3f\x5c\xae\xce\x13\x56\x39\x9c\x66\xd3\xb0\x00\xe1\xc5\xb3\x50\xaa\xf3\xf0\x4c\x35\x3d\x22\x49\x59\xca\x43\x52\xb4\xcb\x24\xe4\x86\x4e\xe9\x7d\x2a\xcb\x71\xc1\x1d\x83\x1c\x88\xbd\x0e\x7b\xf5\x18\x65\xb9\x04\x6f\x81\x29\xab\xf3\x37\x29\x51\xd6\xf1\x84\xb4\xa3\xd4\x84\xa9\x2b\x24\x67\xd3\x02\x5a\x8c\x63\x50\x00\xbc\x30\x7f\x86\x14\xbc\xb9\x5c\x37\xdf\x66\xf3\x21\xf4\x1e\xf2\xa5\xd5\x75\x04\x04\x09\xf3\x65\xd6\x67\xfc\x13\x68\x6b\x7a\x6a\x9b\x1e\xf3\xdc\xb0\x4b\xbf\x2b\x12\x54\x0c\xc0\x27\xa1\x4e\x83\x40\xc2\x84\x2a\x3e\x3c\x4a\x94\x14\x97\xea\x3b\xb3\x13\x6e\x3f\x51\xdb\xf2\xdf\xd9\x3a\xf5\xce\xec\xbe\x8d\xf3\x00\xba\x43\xe4\x23\x0e\x41\xff\x09\xee\x12\xde\xb8\xbc\xc2\x38\x01\x71\xbc\xee\x51\x58\x24\x93\xe7\x84\x95\x70\x49\x1f\x84\xbe\x84\x38\x8e\xb3\x89\x77\xaa\xe7\xc4\x56\xc2\x91\xaf\x74\x17\x59\x32\x5a\xff\xd3\xd7\xb0\xa5\x04\xe2\x47\xc3\xd1\x9b\x4a\x5d\x57\xb0\x4d\xd0\xb3\x4d\x44\x23\x60\x26\x60\x2d\x45\xc8\x60\xcd\x2d\x20\x8f\x17\xe3\x1b\xd1\x9d\x3d\x6b\x4a\xd0\x27\xdb\x21\xbc\xeb\xc6\xd7\xc6\xc9\xa8\x72\xd1\xe0\xa7\x29\xec\xf6\xf3\x78\xf9\xbf\x00\x00\x00\xff\xff\x45\x4b\x30\x12\xec\x17\x00\x00")

func resourceResourceGoBytes() ([]byte, error) {
	return bindataRead(
		_resourceResourceGo,
		"resource/resource.go",
	)
}

func resourceResourceGo() (*asset, error) {
	bytes, err := resourceResourceGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/resource.go", size: 6124, mode: os.FileMode(420), modTime: time.Unix(1562744699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceResource_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdf\x4f\xe4\x36\x10\x7e\x4e\xfe\x8a\x91\xa5\xab\xb2\x55\x9a\x6c\xdb\x2b\x48\x48\xf7\x50\xd1\x45\xa2\x3a\x7e\x08\x28\x7d\x40\x08\x79\x9d\xc9\xae\x4b\x62\x6f\xed\xc9\xf6\x10\xda\xff\xbd\x1a\x27\x59\xb2\x1c\x2c\x70\xea\x5d\x4f\x3a\xd6\x8e\x3d\x33\x9f\x67\xbe\xf9\xec\x85\x54\xb7\x72\x86\xe0\xd0\xdb\xc6\x29\x8c\x63\x5d\x2f\xac\x23\x48\xe2\x48\xa0\x51\xb6\xd0\x66\x96\xff\xe5\xad\x11\x71\x24\xca\x9a\xf8\x47\xdb\x5c\xdb\x86\x74\xc5\x13\xeb\xf9\xef\x42\xd2\x3c\x2f\x75\x85\x3c\xe0\x0f\x84\x9e\xb4\x99\x89\x38\x8e\xac\x02\x31\xd3\x34\x6f\xa6\x99\xb2\x75\xae\x2a\xdb\x14\x53\xeb\x7d\x6e\x4b\x65\x1b\xe7\x71\x3d\x60\xc3\xc1\x4e\x4f\x0e\x49\xcd\x5d\x1e\x9c\x95\x77\xb9\xf4\x1e\x1d\x89\x78\x14\xc7\x4b\xe9\x18\x23\xaf\x7c\xb4\xb3\x19\x3a\xf8\x00\x56\x65\xc7\xf8\x4f\x3b\x4d\xac\xca\xce\x75\x85\x86\x3e\xe2\x12\xab\x11\xdb\x94\x8d\x51\x70\x81\x9e\xf6\xe7\xa8\x6e\x13\x82\xef\x3b\x94\xd9\xc5\x08\xee\xe3\x08\xcd\x12\xf6\x7a\x37\x13\xb3\xd4\xce\x9a\x1a\x0d\x25\xa3\x38\xe2\x78\xbc\x7b\x5f\x7a\xf4\xf0\x01\xae\xae\x3d\xb9\x46\x11\xdb\x45\x6d\xee\x0e\x0d\x00\xb0\xf5\x79\x9b\xca\x28\x5a\xa2\xf3\xda\x9a\xb0\x60\x55\x76\xd9\x4e\x1f\x16\xfc\x49\x43\x70\x75\xbd\xb1\x84\xce\x41\xff\x0f\x9d\xb3\x2e\x8e\x56\x1c\x83\xff\x47\x6b\xe7\xf7\xab\x94\xe7\x46\x57\xe1\x77\xe8\xe3\x7e\x30\x14\xca\x36\x86\xc4\x1e\x88\x1f\xc5\x6a\xc3\x24\x4c\x9e\xf4\xf9\xb4\xf9\x78\x3c\x16\xab\xd7\xc6\x1a\x8f\xbf\x2c\x9c\x69\x6a\x74\xb6\x83\xbb\x71\xc0\x89\x73\xdd\xae\xde\xdb\x2a\x8e\xa3\xd2\x3a\xb8\x49\x81\x14\x97\xcd\x49\x33\xc3\x41\x8d\x38\x9a\xe3\x85\xb3\x8e\xdb\xf7\xab\x41\xe6\x53\x4e\x6e\x30\xcb\x3a\x36\xa8\xac\x2f\x23\x7b\xcc\xd6\xb5\x4b\x01\xcd\x32\x85\x07\xa6\x8d\xe2\x28\x6a\x99\x98\x4d\xfe\x6e\x64\x95\xd0\xd0\x80\x6b\x9a\x42\x3f\x79\x66\x2f\x3a\x17\x00\x8c\xf8\x1c\xab\x01\x33\x0f\xcd\x37\xa0\xe5\x42\x3a\x59\xfb\xf5\xf7\xd3\x30\xdd\x46\xd7\x1a\x49\x16\x92\x24\xd3\xd5\xaa\xec\xa8\x9b\xbe\x95\xad\xeb\x58\x5b\x99\x26\xd6\x8b\x7d\x9c\xe0\x2c\xba\x3f\x96\x35\xee\x81\x90\x22\x85\x4b\x59\x35\x3c\x9e\x8a\x55\x0a\xfd\x82\x1a\x2c\x14\x9d\x97\xd7\x93\xf0\x15\xc8\x7e\xfa\xf9\xfd\xd7\x05\xf7\x2a\x4e\x53\xb1\xe6\x6e\xab\xc2\xd9\x05\xd6\x8b\xdf\xb4\x4b\x84\x48\x41\xf4\x4a\xfe\x83\x18\x70\xef\x58\x07\xe6\xb5\x8c\x8b\x0a\x2c\xd1\x81\xf5\xd9\x19\xd6\x76\x89\xbf\x56\x55\x42\xc5\x28\xde\xd6\x2f\x29\xf4\x1c\x18\x34\x0e\x93\xb5\x08\x7c\xde\xe8\x9c\x9e\x5e\x2f\xb6\x51\x1c\x45\x79\x0e\x07\xda\x79\x0a\xdf\x81\xe6\x7c\x13\x51\xe3\x0c\x2c\x39\x57\x7e\x6b\xa7\xb1\xcf\x6e\xf8\x4c\x9b\x0d\x78\xfb\x70\x80\x17\x5b\xb2\x85\x35\x31\xbe\x71\x18\x20\xd9\x86\x16\x0d\x01\x5f\x6f\x30\x97\x1e\xa6\x88\x06\x94\x43\x49\x58\x84\x76\xa2\x39\x27\xa4\xac\x29\x3b\x5f\x38\x6d\xa8\x4c\xc4\x3b\x9f\x77\xd8\x44\x0a\x9c\xdd\x28\xba\x49\x83\x8b\x49\x9b\x3e\xeb\xb3\x73\x92\x94\xb0\xf5\x00\xd2\x81\xac\x3c\x32\x24\xeb\xb3\x43\x7f\x6c\x69\xf2\x49\x7b\x4a\x3a\xc3\x51\x8f\xee\x0c\x65\xf1\x18\x5b\x1c\x45\xd3\x3b\x42\xff\x98\x1e\xbc\xf7\x40\x57\xf8\x38\xd4\x90\x14\x9f\x9d\x59\x59\x43\x68\xc8\x83\x74\x08\xd2\x03\x7e\x5a\xa0\x6a\xcf\xcb\x9a\xe3\x50\x16\x5d\x87\xc0\x67\xd7\xd7\x07\xe0\x07\x43\xf6\x87\xa9\xa5\xf3\x73\x59\x25\x1d\xac\xef\x06\x56\xdb\x45\x94\x4b\xbb\xb9\x79\x53\x26\x4f\x1a\xfa\xff\x75\x92\xd5\xf0\x9b\xe8\x64\x7f\x09\x0e\x2e\xc3\xb0\xfe\x5a\x4d\x13\x1d\xe0\x9b\xf0\x38\xdb\x03\x31\xc7\xbb\x35\x3b\xb7\x08\xde\xfb\x5f\x76\x76\x9f\x10\xbc\x2f\x93\xad\x3c\x87\x23\x79\x8b\x20\x81\xb0\x5e\x40\xa1\x1d\x90\x85\x69\xcb\x36\x6d\x98\xc4\x85\x76\xa8\xc8\xba\xbb\xaf\xac\x72\x79\x0e\x87\x25\x0c\x93\x02\x0b\x76\x51\x80\x36\xd0\x16\x3d\xed\xfa\x3b\xa0\xeb\x76\xb6\x02\x40\x73\x74\x83\xb7\xdd\xa9\xa4\x79\x0a\xf6\x96\x81\x0e\xb4\xef\x6a\x33\xe7\xd7\x59\xe2\xc9\x69\x33\x63\x60\xba\xe4\xfd\xa1\x66\x65\x53\x55\x97\x0f\x8e\x9e\x52\x91\x77\x3e\x08\xc8\x5a\xea\x4e\x43\x13\xb3\x71\x9e\xc3\x7e\x0b\x52\x9a\x3b\xa8\x50\xf2\x5b\x1d\x7c\x33\xed\xf3\xa8\xd1\xf3\x89\x7a\xf8\x8c\x84\xed\xda\x16\xb5\x3e\x3b\xba\x2d\xb4\xe3\xbc\xf4\x0f\xf7\x8c\xf3\xfb\x08\xd3\x28\x85\xf1\xee\xee\x2e\x03\x7f\x46\x38\xda\xd2\x86\x4e\xdf\x48\x57\x2d\x17\x5c\xe2\xdf\xcf\x4f\x8e\x79\x57\xaf\x28\xeb\xba\x06\x91\xe8\x0c\x93\x87\xde\x3f\x69\xe8\x85\x60\x7f\x3a\x4d\x18\xfc\xb2\xff\x4e\xfa\xba\x63\x75\x64\x09\x5b\x82\xe8\x3d\x3a\x4e\x0a\x57\xd7\x2c\x47\x49\x0f\x87\xcf\xb7\xb3\xb3\xf3\x5c\xc8\x28\xb0\xfb\x8d\x17\x63\x90\xa7\xad\x37\xe3\x9b\x9e\x94\xc3\x17\xe5\x7f\x7a\xd3\x05\x55\xfd\x37\x00\x00\xff\xff\x0f\x67\x54\x75\x03\x0e\x00\x00")

func resourceResource_testGoBytes() ([]byte, error) {
	return bindataRead(
		_resourceResource_testGo,
		"resource/resource_test.go",
	)
}

func resourceResource_testGo() (*asset, error) {
	bytes, err := resourceResource_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/resource_test.go", size: 3587, mode: os.FileMode(420), modTime: time.Unix(1562749056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile":                dockerfile,
	"Makefile":                  makefile,
	"README.md":                 readmeMd,
	"cmd/check/main.go":         cmdCheckMainGo,
	"cmd/in/main.go":            cmdInMainGo,
	"cmd/out/main.go":           cmdOutMainGo,
	"go.mod":                    goMod,
	"pipeline.yml":              pipelineYml,
	"resource/resource.go":      resourceResourceGo,
	"resource/resource_test.go": resourceResource_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"Makefile":   &bintree{makefile, map[string]*bintree{}},
	"README.md":  &bintree{readmeMd, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"check": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdCheckMainGo, map[string]*bintree{}},
		}},
		"in": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdInMainGo, map[string]*bintree{}},
		}},
		"out": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdOutMainGo, map[string]*bintree{}},
		}},
	}},
	"go.mod":       &bintree{goMod, map[string]*bintree{}},
	"pipeline.yml": &bintree{pipelineYml, map[string]*bintree{}},
	"resource": &bintree{nil, map[string]*bintree{
		"resource.go":      &bintree{resourceResourceGo, map[string]*bintree{}},
		"resource_test.go": &bintree{resourceResource_testGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
